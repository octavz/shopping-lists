# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
### NoDocs ###
OPTIONS        /*path                          @org.shopping.controllers.MainController.options(path)
### NoDocs ###
POST           /api/oauth2/access_token        @org.shopping.controllers.UserController.accessToken

###
# tags:
#   - Product operations
# summary: Create Product
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: product data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
POST           /api/product                    @org.shopping.controllers.ProductController.insertProduct

###
# tags:
#   - Product operations
# summary: Create Supplier
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: supplier data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.SupplierDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.SupplierDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
POST           /api/supplier                   @org.shopping.controllers.ProductController.insertSupplier

###
# tags:
#   - Product operations
# summary: Create Product price
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: product price data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductPriceDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductPriceDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
POST           /api/productPrice               @org.shopping.controllers.ProductController.insertProductPrice

###
# tags:
#   - Product operations
# summary: Update Product
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: product data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
PUT            /api/product/:productId         @org.shopping.controllers.ProductController.updateProduct(productId: String)

###
# tags:
#   - Product operations
# summary: Update Product Price
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: product price data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductPriceDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductPriceDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
PUT            /api/productPrice               @org.shopping.controllers.ProductController.updateProductPrice()

###
# tags:
#   - Product operations
# summary: Delete Product
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   204:
#       description: Operation successful
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
DELETE         /api/product/:productId         @org.shopping.controllers.ProductController.deleteProduct(productId: String)


###
# tags:
#   - List operations
# summary: Create List
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: register data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
POST           /api/list                       @org.shopping.controllers.ListController.insertList

###
# tags:
#   - List operations
# summary: Update List
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: register data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
PUT            /api/list/:listId               @org.shopping.controllers.ListController.updateList(listId: String)

###
# tags:
#   - List operations
# summary: Delete List
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   204:
#       description: Operation successful
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
DELETE         /api/list/:listId               @org.shopping.controllers.ListController.deleteList(listId: String)

###
# tags:
#   - List operations
# summary: Add multiple list Items
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: add list item data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListItemDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListItemsDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
POST           /api/list/:listId/items         @org.shopping.controllers.ListController.addListItems(listId: String)

###
# tags:
#   - Product operations
# summary: Search products
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: products
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ProductsDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/products                   @org.shopping.controllers.ProductController.searchProducts(q: String, offset: Int, count: Int)

###
# tags:
#   - Product operations
# summary: Get all suppliers
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: get all suppliers
#     schema:
#       $ref: '#/definitions/org.shopping.dto.SuppliersDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/suppliers                  @org.shopping.controllers.ProductController.getAllSuppliers

###
# tags:
#   - List operations
# summary: Get List by Id
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: get list b id
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/list/:listId/items         @org.shopping.controllers.ListController.getListItems(listId: String)

###
# tags:
#   - User operations
# summary: Login User
# consumes:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: login data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.LoginRequestDTO'
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.LoginResponseDTO'
###
POST           /api/login                      @org.shopping.controllers.UserController.login

###
# tags:
#   - User operations
# summary: Get current user account
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: get user by session
#     schema:
#       $ref: '#/definitions/org.shopping.dto.UserDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/user                       @org.shopping.controllers.UserController.getUserBySession

###
# tags:
#   - User operations
# summary: Get user users by email or nick
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: get items
#     schema:
#       $ref: '#/definitions/org.shopping.dto.UsersDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/users                      @org.shopping.controllers.UserController.searchUsers(email: Option[String], nick: Option[String])

###
# tags:
#   - User operations
# summary: Register User
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: register data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.RegisterRequestDTO'
# responses:
#   201:
#     description: Item created
#     schema:
#       $ref: '#/definitions/org.shopping.dto.LoginResponseDTO'
###
POST           /api/register                   @org.shopping.controllers.UserController.registerAndLogin

###
# tags:
#   - List operations
# summary: Get public lists by userId
# produces:
#   - application/json
# parameters:
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: get items
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ListsDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
#   404:
#     description: Entity not found
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
GET            /api/user/:userId/lists         @org.shopping.controllers.ListController.getUserLists(userId: String, offset: Int, count: Int)

###
# tags:
#   - List operations
# summary: Sync lists
# consumes:
#   - application/json
# produces:
#   - application/json
# parameters:
#   - name: body
#     in: body
#     description: sync data
#     required: true
#     schema:
#       $ref: '#/definitions/org.shopping.dto.SyncDTO'
#   - name: "Authorization"
#     in: "header"
#     description: "Authorization code"
#     required: true
#     type: "string"
# responses:
#   200:
#     description: sync user data
#     schema:
#       $ref: '#/definitions/org.shopping.dto.SyncDTO'
#   401:
#     description: Unauthorized
#     schema:
#       $ref: '#/definitions/org.shopping.dto.ErrorDTO'
###
PUT            /api/data                       @org.shopping.controllers.MainController.syncData()

### NoDocs ###
GET            /app/*file                      controllers.Assets.at(path="/public/client/app",file)
### NoDocs ###
GET            /public.html                    controllers.Assets.at(path="/public/client",file="public.html")
### NoDocs ###
GET            /autologin.html                 controllers.Assets.at(path="/public/client",file="autologin.html")
### NoDocs ###
GET            /index.html                     controllers.Assets.at(path="/public/client",file="index.html")

### NoDocs ###
GET            /docs/swagger-ui/*file          controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)
### NoDocs ###
GET            /assets/*file                   controllers.Assets.versioned(path="/public", file: Asset)
### NoDocs ###
GET            /docs                           controllers.Default.redirect(to = "/docs/swagger-ui/index.html?url=/assets/swagger.json")



