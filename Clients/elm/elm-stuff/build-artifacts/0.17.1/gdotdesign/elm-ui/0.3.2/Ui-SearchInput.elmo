var _gdotdesign$elm_ui$Ui_SearchInput$setValue = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				value: value,
				input: A2(_gdotdesign$elm_ui$Ui_Input$setValue, value, model.input)
			});
	});
var _gdotdesign$elm_ui$Ui_SearchInput$subscribe = F2(
	function (msg, model) {
		return A2(_gdotdesign$elm_ui$Ui_Helpers_Emitter$listenString, model.uid, msg);
	});
var _gdotdesign$elm_ui$Ui_SearchInput$init = F2(
	function (timeout, placeholder) {
		return {
			input: A2(_gdotdesign$elm_ui$Ui_Input$init, '', placeholder),
			uid: _gdotdesign$elm_ui$Ui_Native_Uid$uid(
				{ctor: '_Tuple0'}),
			timeout: timeout,
			disabled: false,
			readonly: false,
			timestamp: 0,
			value: ''
		};
	});
var _gdotdesign$elm_ui$Ui_SearchInput$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {input: a, timestamp: b, disabled: c, readonly: d, value: e, timeout: f, uid: g};
	});
var _gdotdesign$elm_ui$Ui_SearchInput$NoOp = {ctor: 'NoOp'};
var _gdotdesign$elm_ui$Ui_SearchInput$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _gdotdesign$elm_ui$Ui_SearchInput$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Update':
				var value = model.input.value;
				return (_elm_lang$core$Native_Utils.eq(_p0._0, model.timestamp + model.timeout) && (!_elm_lang$core$Native_Utils.eq(model.value, value))) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{value: value}),
					_1: A2(_gdotdesign$elm_ui$Ui_Helpers_Emitter$sendString, model.uid, value)
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Input':
				var _p1 = A2(_gdotdesign$elm_ui$Ui_Input$update, _p0._0, model.input);
				var input = _p1._0;
				var effect2 = _p1._1;
				var justNow = _gdotdesign$elm_ui$Ext_Date$nowTime(
					{ctor: '_Tuple0'});
				var updatedModel = _elm_lang$core$Native_Utils.update(
					model,
					{input: input, timestamp: justNow});
				var cmd = A3(
					_elm_lang$core$Task$perform,
					function (_p2) {
						return _gdotdesign$elm_ui$Ui_SearchInput$NoOp;
					},
					function (_p3) {
						return _gdotdesign$elm_ui$Ui_SearchInput$Update(justNow + model.timeout);
					},
					_elm_lang$core$Process$sleep(model.timeout));
				return {ctor: '_Tuple2', _0: updatedModel, _1: cmd};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _gdotdesign$elm_ui$Ui_SearchInput$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _gdotdesign$elm_ui$Ui_SearchInput$render = function (_p4) {
	var _p5 = _p4;
	var updatedInput = _elm_lang$core$Native_Utils.update(
		_p5.input,
		{disabled: _p5.disabled, readonly: _p5.readonly});
	return A3(
		_elm_lang$html$Html$node,
		'ui-search-input',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_gdotdesign$elm_ui$Ui$icon,
				'search',
				false,
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html_App$map,
				_gdotdesign$elm_ui$Ui_SearchInput$Input,
				_gdotdesign$elm_ui$Ui_Input$view(updatedInput))
			]));
};
var _gdotdesign$elm_ui$Ui_SearchInput$view = function (model) {
	return A2(_elm_lang$html$Html_Lazy$lazy, _gdotdesign$elm_ui$Ui_SearchInput$render, model);
};
