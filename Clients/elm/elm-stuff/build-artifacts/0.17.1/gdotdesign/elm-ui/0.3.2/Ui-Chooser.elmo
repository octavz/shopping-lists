var _gdotdesign$elm_ui$Ui_Chooser$createRegex = function (value) {
	return _elm_lang$core$Regex$caseInsensitive(
		_elm_lang$core$Regex$regex(
			_elm_lang$core$Regex$escape(value)));
};
var _gdotdesign$elm_ui$Ui_Chooser$items = function (model) {
	var test = function (item) {
		return A2(
			_elm_lang$core$Regex$contains,
			_gdotdesign$elm_ui$Ui_Chooser$createRegex(model.value),
			item.label);
	};
	return _elm_lang$core$String$isEmpty(
		_elm_lang$core$String$trim(model.value)) ? model.data : A2(_elm_lang$core$List$filter, test, model.data);
};
var _gdotdesign$elm_ui$Ui_Chooser$availableItems = function (model) {
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.value;
		},
		_gdotdesign$elm_ui$Ui_Chooser$items(model));
};
var _gdotdesign$elm_ui$Ui_Chooser$label = function (model) {
	return A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.label;
			},
			A2(
				_elm_lang$core$List$filter,
				function (item) {
					return A2(_elm_lang$core$Set$member, item.value, model.selected);
				},
				model.data)));
};
var _gdotdesign$elm_ui$Ui_Chooser$setInputValue = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{value: value});
	});
var _gdotdesign$elm_ui$Ui_Chooser$intendFirst = function (model) {
	var available = _gdotdesign$elm_ui$Ui_Chooser$availableItems(model);
	var index = A2(_gdotdesign$elm_ui$Ui_Helpers_Intendable$index, model.intended, available);
	return _elm_lang$core$Native_Utils.eq(index, -1) ? _elm_lang$core$Native_Utils.update(
		model,
		{
			intended: A2(_gdotdesign$elm_ui$Ui_Helpers_Intendable$next, '', available)
		}) : model;
};
var _gdotdesign$elm_ui$Ui_Chooser$sendValue = function (model) {
	var value = _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Json_Encode$string,
			_elm_lang$core$Set$toList(model.selected)));
	return {
		ctor: '_Tuple2',
		_0: model,
		_1: A2(_gdotdesign$elm_ui$Ui_Helpers_Emitter$send, model.uid, value)
	};
};
var _gdotdesign$elm_ui$Ui_Chooser$toggleMultipleItem = F2(
	function (value, model) {
		var updated_set = A2(_elm_lang$core$Set$member, value, model.selected) ? ((model.deselectable || (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Set$size(model.selected),
			1) > 0)) ? A2(_elm_lang$core$Set$remove, value, model.selected) : model.selected) : A2(_elm_lang$core$Set$insert, value, model.selected);
		return _gdotdesign$elm_ui$Ui_Chooser$sendValue(
			_elm_lang$core$Native_Utils.update(
				model,
				{selected: updated_set}));
	});
var _gdotdesign$elm_ui$Ui_Chooser$toggleSingleItem = F2(
	function (value, model) {
		var updatedModel = (A2(_elm_lang$core$Set$member, value, model.selected) && model.deselectable) ? _elm_lang$core$Native_Utils.update(
			model,
			{selected: _elm_lang$core$Set$empty}) : _elm_lang$core$Native_Utils.update(
			model,
			{
				selected: _elm_lang$core$Set$singleton(value)
			});
		return _gdotdesign$elm_ui$Ui_Chooser$sendValue(updatedModel);
	});
var _gdotdesign$elm_ui$Ui_Chooser$selectFirst = function (model) {
	var _p0 = _elm_lang$core$List$head(model.data);
	if (_p0.ctor === 'Just') {
		return _gdotdesign$elm_ui$Ui_Chooser$sendValue(
			_elm_lang$core$Native_Utils.update(
				model,
				{
					selected: _elm_lang$core$Set$singleton(_p0._0.value)
				}));
	} else {
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _gdotdesign$elm_ui$Ui_Chooser$updateData = F2(
	function (data, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{data: data});
	});
var _gdotdesign$elm_ui$Ui_Chooser$getFirstSelected = function (model) {
	return _elm_lang$core$List$head(
		_elm_lang$core$Set$toList(model.selected));
};
var _gdotdesign$elm_ui$Ui_Chooser$toggleItem = F2(
	function (value, model) {
		return model.multiple ? A2(_gdotdesign$elm_ui$Ui_Chooser$toggleMultipleItem, value, model) : A2(_gdotdesign$elm_ui$Ui_Chooser$toggleSingleItem, value, model);
	});
var _gdotdesign$elm_ui$Ui_Chooser$close = function (model) {
	return A2(
		_gdotdesign$elm_ui$Ui_Chooser$setInputValue,
		'',
		_gdotdesign$elm_ui$Ui_Helpers_Dropdown$close(model));
};
var _gdotdesign$elm_ui$Ui_Chooser$closeIfShouldClose = function (model) {
	return model.closeOnSelect ? _gdotdesign$elm_ui$Ui_Chooser$close(model) : model;
};
var _gdotdesign$elm_ui$Ui_Chooser$toggleItemAndClose = F2(
	function (value, model) {
		var _p1 = A2(_gdotdesign$elm_ui$Ui_Chooser$toggleItem, value, model);
		var model = _p1._0;
		var effect = _p1._1;
		return {
			ctor: '_Tuple2',
			_0: _gdotdesign$elm_ui$Ui_Chooser$closeIfShouldClose(model),
			_1: effect
		};
	});
var _gdotdesign$elm_ui$Ui_Chooser$setValue = F2(
	function (value, model) {
		var newSelected = _elm_lang$core$Set$singleton(value);
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Set$size(
				A2(_elm_lang$core$Set$diff, newSelected, model.selected)),
			0) ? model : _elm_lang$core$Native_Utils.update(
			model,
			{selected: newSelected});
	});
var _gdotdesign$elm_ui$Ui_Chooser$update = F2(
	function (action, model) {
		var _p2 = action;
		switch (_p2.ctor) {
			case 'Enter':
				var fn = model.closeOnSelect ? _gdotdesign$elm_ui$Ui_Helpers_Dropdown$toggleWithDimensions : _gdotdesign$elm_ui$Ui_Helpers_Dropdown$openWithDimensions;
				var _p3 = A2(_gdotdesign$elm_ui$Ui_Chooser$toggleItem, model.intended, model);
				var updatedModel = _p3._0;
				var effect = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: A2(fn, _p2._0, updatedModel),
					_1: effect
				};
			case 'Select':
				return A2(_gdotdesign$elm_ui$Ui_Chooser$toggleItemAndClose, _p2._0, model);
			case 'Filter':
				return {
					ctor: '_Tuple2',
					_0: _gdotdesign$elm_ui$Ui_Chooser$intendFirst(
						A2(_gdotdesign$elm_ui$Ui_Chooser$setInputValue, _p2._0, model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Toggle':
				return {
					ctor: '_Tuple2',
					_0: _gdotdesign$elm_ui$Ui_Chooser$intendFirst(
						A2(_gdotdesign$elm_ui$Ui_Helpers_Dropdown$toggleWithDimensions, _p2._0, model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Focus':
				return {
					ctor: '_Tuple2',
					_0: _gdotdesign$elm_ui$Ui_Chooser$intendFirst(
						A2(_gdotdesign$elm_ui$Ui_Helpers_Dropdown$openWithDimensions, _p2._0, model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Close':
				return {
					ctor: '_Tuple2',
					_0: _gdotdesign$elm_ui$Ui_Chooser$close(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Blur':
				return {
					ctor: '_Tuple2',
					_0: _gdotdesign$elm_ui$Ui_Chooser$close(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_gdotdesign$elm_ui$Ui_Helpers_Dropdown$openWithDimensions,
						_p2._0,
						_elm_lang$core$Native_Utils.update(
							model,
							{
								intended: A2(
									_gdotdesign$elm_ui$Ui_Helpers_Intendable$next,
									model.intended,
									_gdotdesign$elm_ui$Ui_Chooser$availableItems(model))
							})),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_gdotdesign$elm_ui$Ui_Helpers_Dropdown$openWithDimensions,
						_p2._0,
						_elm_lang$core$Native_Utils.update(
							model,
							{
								intended: A2(
									_gdotdesign$elm_ui$Ui_Helpers_Intendable$previous,
									model.intended,
									_gdotdesign$elm_ui$Ui_Chooser$availableItems(model))
							})),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _gdotdesign$elm_ui$Ui_Chooser$subscribe = F2(
	function (msg, model) {
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Set$fromList,
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
		return A2(
			_gdotdesign$elm_ui$Ui_Helpers_Emitter$listen,
			model.uid,
			A3(_gdotdesign$elm_ui$Ui_Helpers_Emitter$decode, decoder, _elm_lang$core$Set$empty, msg));
	});
var _gdotdesign$elm_ui$Ui_Chooser$init = F3(
	function (data, placeholder, value) {
		var selected = _elm_lang$core$Native_Utils.eq(value, '') ? _elm_lang$core$Set$empty : _elm_lang$core$Set$singleton(value);
		return _gdotdesign$elm_ui$Ui_Chooser$intendFirst(
			{
				render: function (item) {
					return A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(item.label)
							]));
				},
				dropdownPosition: 'bottom',
				placeholder: placeholder,
				uid: _gdotdesign$elm_ui$Ui_Native_Uid$uid(
					{ctor: '_Tuple0'}),
				closeOnSelect: false,
				deselectable: false,
				selected: selected,
				searchable: false,
				multiple: false,
				disabled: false,
				readonly: false,
				intended: '',
				open: false,
				data: data,
				value: ''
			});
	});
var _gdotdesign$elm_ui$Ui_Chooser$Item = F2(
	function (a, b) {
		return {label: a, value: b};
	});
var _gdotdesign$elm_ui$Ui_Chooser$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {dropdownPosition: a, render: b, selected: c, placeholder: d, closeOnSelect: e, deselectable: f, intended: g, searchable: h, data: i, multiple: j, disabled: k, readonly: l, value: m, uid: n, open: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gdotdesign$elm_ui$Ui_Chooser$Blur = {ctor: 'Blur'};
var _gdotdesign$elm_ui$Ui_Chooser$NoOp = {ctor: 'NoOp'};
var _gdotdesign$elm_ui$Ui_Chooser$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$renderItem = F2(
	function (model, item) {
		var selectEvent = model.closeOnSelect ? A2(
			_gdotdesign$elm_ui$Html_Events_Extra$onStop,
			'mouseup',
			_gdotdesign$elm_ui$Ui_Chooser$Select(item.value)) : A2(
			_gdotdesign$elm_ui$Html_Events_Extra$onPreventDefault,
			'mousedown',
			_gdotdesign$elm_ui$Ui_Chooser$Select(item.value));
		return A3(
			_elm_lang$html$Html$node,
			'ui-chooser-item',
			_elm_lang$core$Native_List.fromArray(
				[
					selectEvent,
					_elm_lang$html$Html_Attributes$classList(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'selected',
							_1: A2(_elm_lang$core$Set$member, item.value, model.selected)
						},
							{
							ctor: '_Tuple2',
							_0: 'intended',
							_1: _elm_lang$core$Native_Utils.eq(item.value, model.intended)
						}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					model.render(item)
				]));
	});
var _gdotdesign$elm_ui$Ui_Chooser$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Prev = function (a) {
	return {ctor: 'Prev', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Next = function (a) {
	return {ctor: 'Next', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Enter = function (a) {
	return {ctor: 'Enter', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Close = function (a) {
	return {ctor: 'Close', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Focus = function (a) {
	return {ctor: 'Focus', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$Toggle = function (a) {
	return {ctor: 'Toggle', _0: a};
};
var _gdotdesign$elm_ui$Ui_Chooser$render = function (model) {
	var actions = A2(
		_gdotdesign$elm_ui$Ui$enabledActions,
		model,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onInput(_gdotdesign$elm_ui$Ui_Chooser$Filter),
				_elm_lang$html$Html_Events$onBlur(_gdotdesign$elm_ui$Ui_Chooser$Blur),
				A2(_gdotdesign$elm_ui$Ui_Helpers_Dropdown$onWithDimensions, 'mousedown', _gdotdesign$elm_ui$Ui_Chooser$Toggle),
				A2(_gdotdesign$elm_ui$Ui_Helpers_Dropdown$onWithDimensions, 'focus', _gdotdesign$elm_ui$Ui_Chooser$Focus),
				_gdotdesign$elm_ui$Ui_Helpers_Dropdown$onKeysWithDimensions(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 27, _1: _gdotdesign$elm_ui$Ui_Chooser$Close},
							{ctor: '_Tuple2', _0: 13, _1: _gdotdesign$elm_ui$Ui_Chooser$Enter},
							{ctor: '_Tuple2', _0: 40, _1: _gdotdesign$elm_ui$Ui_Chooser$Next},
							{ctor: '_Tuple2', _0: 38, _1: _gdotdesign$elm_ui$Ui_Chooser$Prev}
						]),
					_elm_lang$core$Basics$not(model.searchable) ? _elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 32, _1: _gdotdesign$elm_ui$Ui_Chooser$Enter}
						]) : _elm_lang$core$Native_List.fromArray(
						[])))
			]));
	var isReadOnly = _elm_lang$core$Basics$not(model.searchable) || (_elm_lang$core$Basics$not(model.open) || model.readonly);
	var val = (model.open && model.searchable) ? model.value : _gdotdesign$elm_ui$Ui_Chooser$label(model);
	var children = A2(
		_elm_lang$core$List$map,
		_gdotdesign$elm_ui$Ui_Chooser$renderItem(model),
		_gdotdesign$elm_ui$Ui_Chooser$items(model));
	var dropdown = _elm_lang$core$Native_List.fromArray(
		[
			A3(
			_gdotdesign$elm_ui$Ui_Helpers_Dropdown$view,
			_gdotdesign$elm_ui$Ui_Chooser$NoOp,
			model.dropdownPosition,
			_elm_lang$core$Native_List.fromArray(
				[
					_gdotdesign$elm_ui$Ui$scrolledPanel(children)
				]))
		]);
	return A3(
		_elm_lang$html$Html$node,
		'ui-chooser',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$classList(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'searchable', _1: model.searchable},
						{ctor: '_Tuple2', _0: 'dropdown-open', _1: model.open},
						{ctor: '_Tuple2', _0: 'disabled', _1: model.disabled},
						{ctor: '_Tuple2', _0: 'readonly', _1: model.readonly}
					]))
			]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$placeholder(model.placeholder),
								A2(_elm_lang$html$Html_Attributes$attribute, 'id', model.uid),
								_elm_lang$html$Html_Attributes$disabled(model.disabled),
								_elm_lang$html$Html_Attributes$readonly(isReadOnly),
								_elm_lang$html$Html_Attributes$value(val)
							]),
						actions),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]),
			dropdown));
};
var _gdotdesign$elm_ui$Ui_Chooser$view = function (model) {
	return A2(_elm_lang$html$Html_Lazy$lazy, _gdotdesign$elm_ui$Ui_Chooser$render, model);
};
