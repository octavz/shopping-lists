var _gdotdesign$elm_ui$Ui_Tagger$setValue = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				input: A2(_gdotdesign$elm_ui$Ui_Input$setValue, value, model.input)
			});
	});
var _gdotdesign$elm_ui$Ui_Tagger$subscribe = F3(
	function (create, remove, model) {
		return _elm_lang$core$Platform_Sub$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_gdotdesign$elm_ui$Ui_Helpers_Emitter$listenString,
					A2(_elm_lang$core$Basics_ops['++'], model.uid, '-create'),
					create),
					A2(
					_gdotdesign$elm_ui$Ui_Helpers_Emitter$listenString,
					A2(_elm_lang$core$Basics_ops['++'], model.uid, '-remove'),
					remove)
				]));
	});
var _gdotdesign$elm_ui$Ui_Tagger$init = function (placeholder) {
	return {
		input: A2(_gdotdesign$elm_ui$Ui_Input$init, '', placeholder),
		uid: _gdotdesign$elm_ui$Ui_Native_Uid$uid(
			{ctor: '_Tuple0'}),
		removeable: true,
		disabled: false,
		readonly: false
	};
};
var _gdotdesign$elm_ui$Ui_Tagger$Tag = F2(
	function (a, b) {
		return {label: a, id: b};
	});
var _gdotdesign$elm_ui$Ui_Tagger$Model = F5(
	function (a, b, c, d, e) {
		return {input: a, removeable: b, disabled: c, readonly: d, uid: e};
	});
var _gdotdesign$elm_ui$Ui_Tagger$Create = {ctor: 'Create'};
var _gdotdesign$elm_ui$Ui_Tagger$Remove = function (a) {
	return {ctor: 'Remove', _0: a};
};
var _gdotdesign$elm_ui$Ui_Tagger$renderTag = F2(
	function (model, tag) {
		var icon = (model.disabled || (model.readonly || _elm_lang$core$Basics$not(model.removeable))) ? _elm_lang$html$Html$text('') : A3(
			_gdotdesign$elm_ui$Ui$icon,
			'android-close',
			true,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(
						_gdotdesign$elm_ui$Ui_Tagger$Remove(tag.id)),
						_gdotdesign$elm_ui$Html_Events_Extra$onKeys(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 13,
								_1: _gdotdesign$elm_ui$Ui_Tagger$Remove(tag.id)
							}
							]))
					]),
				_gdotdesign$elm_ui$Ui$tabIndex(model)));
		return A3(
			_elm_lang$html$Html$node,
			'ui-tagger-tag',
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(tag.label),
					icon
				]));
	});
var _gdotdesign$elm_ui$Ui_Tagger$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _gdotdesign$elm_ui$Ui_Tagger$update = F2(
	function (action, model) {
		var _p0 = action;
		switch (_p0.ctor) {
			case 'Input':
				var _p1 = A2(_gdotdesign$elm_ui$Ui_Input$update, _p0._0, model.input);
				var input = _p1._0;
				var effect = _p1._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{input: input}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _gdotdesign$elm_ui$Ui_Tagger$Input, effect)
				};
			case 'Create':
				var isEmpty = _elm_lang$core$String$isEmpty(
					_elm_lang$core$String$trim(model.input.value));
				return isEmpty ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_gdotdesign$elm_ui$Ui_Helpers_Emitter$sendString,
						A2(_elm_lang$core$Basics_ops['++'], model.uid, '-create'),
						model.input.value)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_gdotdesign$elm_ui$Ui_Helpers_Emitter$sendString,
						A2(_elm_lang$core$Basics_ops['++'], model.uid, '-remove'),
						_p0._0)
				};
		}
	});
var _gdotdesign$elm_ui$Ui_Tagger$render = F2(
	function (tags, model) {
		var actions = A2(
			_gdotdesign$elm_ui$Ui$enabledActions,
			model,
			_elm_lang$core$Native_List.fromArray(
				[
					_gdotdesign$elm_ui$Html_Events_Extra$onKeys(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 13, _1: _gdotdesign$elm_ui$Ui_Tagger$Create}
						]))
				]));
		var classes = _elm_lang$html$Html_Attributes$classList(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'disabled', _1: model.disabled},
					{ctor: '_Tuple2', _0: 'readonly', _1: model.readonly}
				]));
		var input = model.input;
		var isEmpty = _elm_lang$core$String$isEmpty(
			_elm_lang$core$String$trim(input.value));
		var button = {disabled: model.disabled || (model.readonly || isEmpty), readonly: false, kind: 'primary', size: 'medium', glyph: 'plus', side: 'left', text: ''};
		var updatedInput = _elm_lang$core$Native_Utils.update(
			input,
			{disabled: model.disabled, readonly: model.readonly});
		return A3(
			_elm_lang$html$Html$node,
			'ui-tagger',
			A2(_elm_lang$core$List_ops['::'], classes, actions),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_gdotdesign$elm_ui$Ui_Container$row,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html_App$map,
							_gdotdesign$elm_ui$Ui_Tagger$Input,
							_gdotdesign$elm_ui$Ui_Input$view(updatedInput)),
							A2(_gdotdesign$elm_ui$Ui_IconButton$view, _gdotdesign$elm_ui$Ui_Tagger$Create, button)
						])),
					A3(
					_elm_lang$html$Html$node,
					'ui-tagger-tags',
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_elm_lang$core$List$map,
						_gdotdesign$elm_ui$Ui_Tagger$renderTag(model),
						tags))
				]));
	});
var _gdotdesign$elm_ui$Ui_Tagger$view = F2(
	function (tags, model) {
		return A3(_elm_lang$html$Html_Lazy$lazy2, _gdotdesign$elm_ui$Ui_Tagger$render, tags, model);
	});
