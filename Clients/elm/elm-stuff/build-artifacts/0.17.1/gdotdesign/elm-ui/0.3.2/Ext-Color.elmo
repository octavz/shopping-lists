var _gdotdesign$elm_ui$Ext_Color$toHsv = function (color) {
	var rgba = _elm_lang$core$Color$toRgb(color);
	var green = _elm_lang$core$Basics$toFloat(rgba.green) / 255;
	var blue = _elm_lang$core$Basics$toFloat(rgba.blue) / 255;
	var red = _elm_lang$core$Basics$toFloat(rgba.red) / 255;
	var cmax = A2(
		_elm_lang$core$Basics$max,
		green,
		A2(_elm_lang$core$Basics$max, red, blue));
	var cmin = A2(
		_elm_lang$core$Basics$min,
		green,
		A2(_elm_lang$core$Basics$min, red, blue));
	var delta = cmax - cmin;
	var saturation = _elm_lang$core$Native_Utils.eq(cmax, 0) ? 0 : (delta / cmax);
	var hue = _elm_lang$core$Native_Utils.eq(delta, 0) ? 0 : (_elm_lang$core$Native_Utils.eq(cmax, red) ? (60 * A2(_gdotdesign$elm_ui$Ext_Number$remFloat, (green - blue) / delta, 6)) : (_elm_lang$core$Native_Utils.eq(cmax, green) ? (60 * (((blue - red) / delta) + 2)) : (60 * (((red - green) / delta) + 4))));
	return {saturation: saturation, alpha: rgba.alpha, hue: hue / 360, value: cmax};
};
var _gdotdesign$elm_ui$Ext_Color$hsvToRgb = function (color) {
	var value = color.value;
	var hue = color.hue * 360;
	var saturation = color.saturation;
	var c = value * saturation;
	var x = c * (1 - _elm_lang$core$Basics$abs(
		A2(_gdotdesign$elm_ui$Ext_Number$remFloat, hue / 60, 2) - 1));
	var m = value - c;
	var _p0 = ((_elm_lang$core$Native_Utils.cmp(0, hue) < 1) && (_elm_lang$core$Native_Utils.cmp(hue, 60) < 0)) ? {ctor: '_Tuple3', _0: c, _1: x, _2: 0} : (((_elm_lang$core$Native_Utils.cmp(60, hue) < 1) && (_elm_lang$core$Native_Utils.cmp(hue, 120) < 0)) ? {ctor: '_Tuple3', _0: x, _1: c, _2: 0} : (((_elm_lang$core$Native_Utils.cmp(120, hue) < 1) && (_elm_lang$core$Native_Utils.cmp(hue, 180) < 0)) ? {ctor: '_Tuple3', _0: 0, _1: c, _2: x} : (((_elm_lang$core$Native_Utils.cmp(180, hue) < 1) && (_elm_lang$core$Native_Utils.cmp(hue, 240) < 0)) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: c} : (((_elm_lang$core$Native_Utils.cmp(240, hue) < 1) && (_elm_lang$core$Native_Utils.cmp(hue, 300) < 0)) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: c} : {ctor: '_Tuple3', _0: c, _1: 0, _2: x}))));
	var red = _p0._0;
	var green = _p0._1;
	var blue = _p0._2;
	return A4(
		_elm_lang$core$Color$rgba,
		_elm_lang$core$Basics$round((red + m) * 255),
		_elm_lang$core$Basics$round((green + m) * 255),
		_elm_lang$core$Basics$round((blue + m) * 255),
		color.alpha);
};
var _gdotdesign$elm_ui$Ext_Color$toCSSRgba = function (hsv) {
	var color = _elm_lang$core$Color$toRgb(
		_gdotdesign$elm_ui$Ext_Color$hsvToRgb(hsv));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgba(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(color.red),
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(color.green),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(color.blue),
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(
										A2(_gdotdesign$elm_ui$Ext_Number$roundTo, 2, color.alpha)),
									')'))))))));
};
var _gdotdesign$elm_ui$Ext_Color$encodeHsv = function (hsv) {
	return _elm_lang$core$Json_Encode$list(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Encode$float(hsv.saturation),
				_elm_lang$core$Json_Encode$float(hsv.value),
				_elm_lang$core$Json_Encode$float(hsv.alpha),
				_elm_lang$core$Json_Encode$float(hsv.hue)
			]));
};
var _gdotdesign$elm_ui$Ext_Color$Hsv = F4(
	function (a, b, c, d) {
		return {saturation: a, value: b, alpha: c, hue: d};
	});
var _gdotdesign$elm_ui$Ext_Color$decodeHsv = A2(
	_elm_lang$core$Json_Decode$map,
	function (_p1) {
		var _p2 = _p1;
		return A4(_gdotdesign$elm_ui$Ext_Color$Hsv, _p2._0, _p2._1, _p2._2, _p2._3);
	},
	A5(
		_elm_lang$core$Json_Decode$tuple4,
		F4(
			function (v0, v1, v2, v3) {
				return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
			}),
		_elm_lang$core$Json_Decode$float,
		_elm_lang$core$Json_Decode$float,
		_elm_lang$core$Json_Decode$float,
		_elm_lang$core$Json_Decode$float));
