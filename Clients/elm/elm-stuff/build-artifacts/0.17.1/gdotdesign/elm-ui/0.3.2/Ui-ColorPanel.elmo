var _gdotdesign$elm_ui$Ui_ColorPanel$renderHandle = F2(
	function (top, left) {
		return A3(
			_elm_lang$html$Html$node,
			'ui-color-panel-handle',
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'top', _1: top},
							{ctor: '_Tuple2', _0: 'left', _1: left}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$handleAlpha = F4(
	function (x, y, color, drag) {
		var _p0 = A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$relativePercentPosition, x, y, drag);
		var left = _p0.left;
		var alpha = A3(_elm_lang$core$Basics$clamp, 0, 1, left);
		return _elm_lang$core$Native_Utils.eq(color.alpha, alpha) ? color : _elm_lang$core$Native_Utils.update(
			color,
			{alpha: alpha});
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$handleRect = F4(
	function (x, y, color, drag) {
		var _p1 = A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$relativePercentPosition, x, y, drag);
		var top = _p1.top;
		var left = _p1.left;
		var saturation = A3(_elm_lang$core$Basics$clamp, 0, 1, left);
		var value = 1 - A3(_elm_lang$core$Basics$clamp, 0, 1, top);
		return (_elm_lang$core$Native_Utils.eq(color.saturation, saturation) && _elm_lang$core$Native_Utils.eq(color.value, value)) ? color : _elm_lang$core$Native_Utils.update(
			color,
			{saturation: saturation, value: value});
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$handleHue = F4(
	function (x, y, color, drag) {
		var _p2 = A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$relativePercentPosition, x, y, drag);
		var top = _p2.top;
		var hue = A3(_elm_lang$core$Basics$clamp, 0, 1, top);
		return _elm_lang$core$Native_Utils.eq(color.hue, hue) ? color : _elm_lang$core$Native_Utils.update(
			color,
			{hue: hue});
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$handleClick = F2(
	function (value, model) {
		var drag = A2(_gdotdesign$elm_ui$Ui_Helpers_Drag$handleClick, value, model.drag);
		var hueDrag = A2(_gdotdesign$elm_ui$Ui_Helpers_Drag$handleClick, value, model.hueDrag);
		var alphaDrag = A2(_gdotdesign$elm_ui$Ui_Helpers_Drag$handleClick, value, model.alphaDrag);
		return (_elm_lang$core$Native_Utils.eq(model.alphaDrag, alphaDrag) && (_elm_lang$core$Native_Utils.eq(model.hueDrag, hueDrag) && _elm_lang$core$Native_Utils.eq(model.drag, drag))) ? model : _elm_lang$core$Native_Utils.update(
			model,
			{alphaDrag: alphaDrag, hueDrag: hueDrag, drag: drag});
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$handleMove = F3(
	function (x, y, model) {
		var color = model.drag.dragging ? A4(_gdotdesign$elm_ui$Ui_ColorPanel$handleRect, x, y, model.value, model.drag) : (model.hueDrag.dragging ? A4(_gdotdesign$elm_ui$Ui_ColorPanel$handleHue, x, y, model.value, model.hueDrag) : (model.alphaDrag.dragging ? A4(_gdotdesign$elm_ui$Ui_ColorPanel$handleAlpha, x, y, model.value, model.alphaDrag) : model.value));
		return _elm_lang$core$Native_Utils.eq(model.value, color) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{value: color}),
			_1: A2(
				_gdotdesign$elm_ui$Ui_Helpers_Emitter$send,
				model.uid,
				_gdotdesign$elm_ui$Ext_Color$encodeHsv(color))
		};
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$setValue = F2(
	function (color, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				value: _gdotdesign$elm_ui$Ext_Color$toHsv(color)
			});
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$update = F2(
	function (action, model) {
		var _p3 = action;
		switch (_p3.ctor) {
			case 'LiftRect':
				var _p4 = _p3._0._0;
				return A3(
					_gdotdesign$elm_ui$Ui_ColorPanel$handleMove,
					_p4.left,
					_p4.top,
					_elm_lang$core$Native_Utils.update(
						model,
						{
							drag: A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$lift, _p3._0._1, _p4, model.drag)
						}));
			case 'LiftAlpha':
				var _p5 = _p3._0._0;
				return A3(
					_gdotdesign$elm_ui$Ui_ColorPanel$handleMove,
					_p5.left,
					_p5.top,
					_elm_lang$core$Native_Utils.update(
						model,
						{
							alphaDrag: A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$lift, _p3._0._1, _p5, model.alphaDrag)
						}));
			case 'LiftHue':
				var _p6 = _p3._0._0;
				return A3(
					_gdotdesign$elm_ui$Ui_ColorPanel$handleMove,
					_p6.left,
					_p6.top,
					_elm_lang$core$Native_Utils.update(
						model,
						{
							hueDrag: A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$lift, _p3._0._1, _p6, model.hueDrag)
						}));
			case 'Move':
				return A3(_gdotdesign$elm_ui$Ui_ColorPanel$handleMove, _p3._0._0, _p3._0._1, model);
			default:
				return {
					ctor: '_Tuple2',
					_0: A2(_gdotdesign$elm_ui$Ui_ColorPanel$handleClick, _p3._0, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$subscribe = F2(
	function (msg, model) {
		return A2(
			_gdotdesign$elm_ui$Ui_Helpers_Emitter$listen,
			model.uid,
			A3(
				_gdotdesign$elm_ui$Ui_Helpers_Emitter$decode,
				_gdotdesign$elm_ui$Ext_Color$decodeHsv,
				_gdotdesign$elm_ui$Ext_Color$toHsv(_elm_lang$core$Color$black),
				msg));
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$init = function (color) {
	return {
		value: _gdotdesign$elm_ui$Ext_Color$toHsv(color),
		uid: _gdotdesign$elm_ui$Ui_Native_Uid$uid(
			{ctor: '_Tuple0'}),
		alphaDrag: _gdotdesign$elm_ui$Ui_Helpers_Drag$init,
		hueDrag: _gdotdesign$elm_ui$Ui_Helpers_Drag$init,
		drag: _gdotdesign$elm_ui$Ui_Helpers_Drag$init,
		disabled: false,
		readonly: false
	};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {alphaDrag: a, hueDrag: b, drag: c, disabled: d, readonly: e, uid: f, value: g};
	});
var _gdotdesign$elm_ui$Ui_ColorPanel$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$LiftHue = function (a) {
	return {ctor: 'LiftHue', _0: a};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$LiftRect = function (a) {
	return {ctor: 'LiftRect', _0: a};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$LiftAlpha = function (a) {
	return {ctor: 'LiftAlpha', _0: a};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$render = function (model) {
	var action = function (act) {
		return A2(
			_gdotdesign$elm_ui$Ui$enabledActions,
			model,
			_elm_lang$core$Native_List.fromArray(
				[
					A3(_gdotdesign$elm_ui$Html_Events_Geometry$onWithDimensions, 'mousedown', false, act)
				]));
	};
	var asPercent = function (value) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(value * 100),
			'%');
	};
	var color = model.value;
	var colorTransparent = _gdotdesign$elm_ui$Ext_Color$toCSSRgba(
		_elm_lang$core$Native_Utils.update(
			color,
			{alpha: 0}));
	var colorFull = _gdotdesign$elm_ui$Ext_Color$toCSSRgba(
		_elm_lang$core$Native_Utils.update(
			color,
			{alpha: 1}));
	var gradient = A2(
		_elm_lang$core$Basics_ops['++'],
		'linear-gradient(90deg, ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			colorTransparent,
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				A2(_elm_lang$core$Basics_ops['++'], colorFull, ')'))));
	var background = A2(
		_elm_lang$core$Basics_ops['++'],
		'hsla(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$round(model.value.hue * 360)),
			', 100%, 50%, 1)'));
	return A3(
		_elm_lang$html$Html$node,
		'ui-color-panel',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$classList(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'disabled', _1: model.disabled},
						{ctor: '_Tuple2', _0: 'readonly', _1: model.readonly}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A3(
						_elm_lang$html$Html$node,
						'ui-color-panel-rect',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$style(
									_elm_lang$core$Native_List.fromArray(
										[
											{ctor: '_Tuple2', _0: 'background-color', _1: background},
											{
											ctor: '_Tuple2',
											_0: 'cursor',
											_1: model.drag.dragging ? 'move' : ''
										}
										]))
								]),
							action(_gdotdesign$elm_ui$Ui_ColorPanel$LiftRect)),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_gdotdesign$elm_ui$Ui_ColorPanel$renderHandle,
								asPercent(1 - color.value),
								asPercent(color.saturation))
							])),
						A3(
						_elm_lang$html$Html$node,
						'ui-color-panel-hue',
						action(_gdotdesign$elm_ui$Ui_ColorPanel$LiftHue),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_gdotdesign$elm_ui$Ui_ColorPanel$renderHandle,
								asPercent(color.hue),
								'')
							]))
					])),
				A3(
				_elm_lang$html$Html$node,
				'ui-color-panel-alpha',
				action(_gdotdesign$elm_ui$Ui_ColorPanel$LiftAlpha),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'background-image', _1: gradient}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_gdotdesign$elm_ui$Ui_ColorPanel$renderHandle,
						'',
						asPercent(color.alpha))
					]))
			]));
};
var _gdotdesign$elm_ui$Ui_ColorPanel$view = function (model) {
	return A2(_elm_lang$html$Html_Lazy$lazy, _gdotdesign$elm_ui$Ui_ColorPanel$render, model);
};
var _gdotdesign$elm_ui$Ui_ColorPanel$Move = function (a) {
	return {ctor: 'Move', _0: a};
};
var _gdotdesign$elm_ui$Ui_ColorPanel$subscriptions = function (model) {
	var dragging = model.alphaDrag.dragging || (model.hueDrag.dragging || model.drag.dragging);
	return A3(_gdotdesign$elm_ui$Ui_Helpers_Drag$subscriptions, _gdotdesign$elm_ui$Ui_ColorPanel$Move, _gdotdesign$elm_ui$Ui_ColorPanel$Click, dragging);
};
